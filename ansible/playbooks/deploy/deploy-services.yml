---
- name: Deploy Services Dynamically Based on Variables
  hosts: all_servers
  become: yes
  gather_facts: yes
  vars:
    monitoring_dir: "/opt/monitoring"
    node_exporter_version: "1.7.0"
    node_exporter_user: "node_exporter"
    node_exporter_port: 9100
    
  tasks:
    # =================================
    # PACKAGE MANAGER UPDATES
    # =================================
    - name: Update package cache (Ubuntu)
      apt:
        update_cache: yes
        cache_valid_time: 3600
      when: ansible_distribution == "Ubuntu"
      
    - name: Update package cache (Amazon Linux)
      yum:
        update_cache: yes
      when: ansible_distribution == "Amazon"
      
    # =================================
    # NGINX INSTALLATION
    # =================================
    - name: Install Nginx (Ubuntu)
      apt:
        name: nginx
        state: present
      when: ansible_distribution == "Ubuntu" and install_nginx | default(false) | bool
      
    - name: Install Nginx (Amazon Linux)
      yum:
        name: nginx
        state: present
      when: ansible_distribution == "Amazon" and install_nginx | default(false) | bool
      
    - name: Start and enable Nginx
      systemd:
        name: nginx
        state: started
        enabled: yes
      when: install_nginx | default(false) | bool
      
    # =================================
    # NODE EXPORTER INSTALLATION
    # =================================
    - name: Create node_exporter user
      user:
        name: "{{ node_exporter_user }}"
        system: yes
        shell: /bin/false
        home: /var/lib/node_exporter
        createhome: no
      when: install_node_exporter | default(false) | bool
        
    - name: Create node_exporter directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ node_exporter_user }}"
        group: "{{ node_exporter_user }}"
        mode: '0755'
      loop:
        - /etc/node_exporter
        - /var/lib/node_exporter
      when: install_node_exporter | default(false) | bool
        
    - name: Download and install Node Exporter (Amazon Linux)
      raw: |
        cd /tmp
        curl -LO https://github.com/prometheus/node_exporter/releases/download/v{{ node_exporter_version }}/node_exporter-{{ node_exporter_version }}.linux-amd64.tar.gz
        tar -xvf node_exporter-{{ node_exporter_version }}.linux-amd64.tar.gz
        sudo cp node_exporter-{{ node_exporter_version }}.linux-amd64/node_exporter /usr/local/bin/
        sudo chown {{ node_exporter_user }}:{{ node_exporter_user }} /usr/local/bin/node_exporter
        sudo chmod +x /usr/local/bin/node_exporter
        rm -rf node_exporter-{{ node_exporter_version }}.linux-amd64*
      when: ansible_distribution == "Amazon" and install_node_exporter | default(false) | bool
      
    - name: Install Node Exporter via package manager (Ubuntu)
      apt:
        name: prometheus-node-exporter
        state: present
      when: ansible_distribution == "Ubuntu" and install_node_exporter | default(false) | bool
      
    - name: Create systemd service file for Node Exporter (Amazon Linux)
      copy:
        content: |
          [Unit]
          Description=Node Exporter
          Wants=network-online.target
          After=network-online.target

          [Service]
          User={{ node_exporter_user }}
          Group={{ node_exporter_user }}
          Type=simple
          ExecStart=/usr/local/bin/node_exporter \
            --web.listen-address=:{{ node_exporter_port }} \
            --path.procfs=/proc \
            --path.sysfs=/sys \
            --collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/node_exporter.service
        owner: root
        group: root
        mode: '0644'
      when: ansible_distribution == "Amazon" and install_node_exporter | default(false) | bool
      
    - name: Start and enable Node Exporter
      systemd:
        daemon_reload: yes
        name: node_exporter
        state: started
        enabled: yes
      when: install_node_exporter | default(false) | bool
      
    # =================================
    # DOCKER-BASED SERVICES (Grafana, Prometheus, Loki, etc.)
    # =================================
    - name: Create monitoring directory
      file:
        path: "{{ monitoring_dir }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'
      when: (install_grafana | default(false) | bool) or (install_prometheus | default(false) | bool) or (install_loki | default(false) | bool)
        
    - name: Copy monitoring stack configuration
      copy:
        src: "../../monitoring/"
        dest: "{{ monitoring_dir }}/"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'
      when: (install_grafana | default(false) | bool) or (install_prometheus | default(false) | bool) or (install_loki | default(false) | bool)
        
    - name: Create dynamic Docker Compose file
      template:
        src: docker-compose-dynamic.yml.j2
        dest: "{{ monitoring_dir }}/docker-compose.yml"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'
      when: (install_grafana | default(false) | bool) or (install_prometheus | default(false) | bool) or (install_loki | default(false) | bool)
        
    - name: Deploy selected monitoring services with Docker Compose
      raw: |
        cd {{ monitoring_dir }}
        docker compose up -d
      become_user: "{{ ansible_user }}"
      when: (install_grafana | default(false) | bool) or (install_prometheus | default(false) | bool) or (install_loki | default(false) | bool)
      
    # =================================
    # SERVICE VERIFICATION
    # =================================
    - name: Wait for Grafana to be ready
      wait_for:
        port: 3000
        host: "{{ ansible_default_ipv4.address }}"
        delay: 10
        timeout: 60
      when: install_grafana | default(false) | bool
      
    - name: Wait for Prometheus to be ready
      wait_for:
        port: 9090
        host: "{{ ansible_default_ipv4.address }}"
        delay: 10
        timeout: 60
      when: install_prometheus | default(false) | bool
      
    - name: Wait for Loki to be ready
      wait_for:
        port: 3100
        host: "{{ ansible_default_ipv4.address }}"
        delay: 10
        timeout: 60
      when: install_loki | default(false) | bool
      
    - name: Wait for Node Exporter to be ready
      wait_for:
        port: "{{ node_exporter_port }}"
        host: "{{ ansible_default_ipv4.address }}"
        delay: 5
        timeout: 30
      when: install_node_exporter | default(false) | bool
      
    # =================================
    # DEPLOYMENT SUMMARY
    # =================================
    - name: Display deployment status for each host
      debug:
        msg: |
          üéâ DEPLOYMENT COMPLETED FOR {{ inventory_hostname }}!
          =================================================
          
          üñ•Ô∏è  Server: {{ ansible_host }} ({{ ansible_distribution }})
          
          üìã Services Deployed:
          {% if install_nginx | default(false) | bool %}   ‚úÖ Nginx (port 80/443){% endif %}
          {% if install_grafana | default(false) | bool %}   ‚úÖ Grafana (port 3000) - http://{{ ansible_host }}:3000{% endif %}
          {% if install_prometheus | default(false) | bool %}   ‚úÖ Prometheus (port 9090) - http://{{ ansible_host }}:9090{% endif %}
          {% if install_loki | default(false) | bool %}   ‚úÖ Loki (port 3100) - http://{{ ansible_host }}:3100{% endif %}
          {% if install_promtail | default(false) | bool %}   ‚úÖ Promtail{% endif %}
          {% if install_node_exporter | default(false) | bool %}   ‚úÖ Node Exporter (port {{ node_exporter_port }}) - http://{{ ansible_host }}:{{ node_exporter_port }}/metrics{% endif %}
          {% if install_postgres_exporter | default(false) | bool %}   ‚úÖ PostgreSQL Exporter (port 9187){% endif %}
          
          {% if not (install_nginx | default(false) | bool or install_grafana | default(false) | bool or install_prometheus | default(false) | bool or install_loki | default(false) | bool or install_promtail | default(false) | bool or install_node_exporter | default(false) | bool or install_postgres_exporter | default(false) | bool) %}   ‚ÑπÔ∏è  No services configured for installation on this host{% endif %}